<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DbSharper2.Library</name>
    </assembly>
    <members>
        <member name="T:DbSharper2.Library.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Properties.Resources.ExceptionCommandNotSqlCommand">
            <summary>
              Looks up a localized string similar to The command must be a SqlCommand..
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Properties.Resources.ExceptionMessageParameterMatchFailure">
            <summary>
              Looks up a localized string similar to The number of parameters does not match number of values for stored procedure..
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Properties.Resources.ExceptionNullOrEmptyString">
            <summary>
              Looks up a localized string similar to The value can not be null or an empty string..
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Providers.CacheProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Adds a cache provider to the collection.
            </summary>
            <param name="provider">The cache provider to be added.</param>
        </member>
        <member name="P:DbSharper2.Library.Providers.CacheProviderCollection.Item(System.String)">
            <summary>
            Gets the cache provider with the specified name.
            </summary>
            <param name="name">The key by which the cache provider is identified.</param>
            <returns>The cache provider with the specified name.</returns>
        </member>
        <member name="T:DbSharper2.Library.Data.IJson">
            <summary>
            Implemented by types whose values can be converted to JSON format string.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.IJson.ToJson">
            <summary>
            Get JSON format string of this object.
            </summary>
            <returns>JSON format string.</returns>
        </member>
        <member name="T:DbSharper2.Library.Data.ModelBase">
            <summary>
            Base class of item.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.#ctor(System.Data.IDataRecord)">
            <summary>
            Enumerate each field and evalute relative property.
            </summary>
            <param name="record">DataRecord.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.GetPropertyValue(System.String)">
            <summary>
            Get value of property by property name.
            </summary>
            <param name="propertyName">Property name.</param>
            <returns>Value of property.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.LoadField(System.Data.IDataRecord,System.String,System.Int32)">
            <summary>
            Evalute field value to relative property.
            </summary>
            <param name="record">DataRecord.</param>
            <param name="fieldName">Field Name.</param>
            <param name="index">Index in DataRecord.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.LoadFields(System.Data.IDataRecord)">
            <summary>
            Enumerate each field and evalute relative property.
            </summary>
            <param name="record">DataRecord.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.AddValue(System.String,System.Object)">
            <summary>
            Add value to fields container.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="value">Value of field.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.Contains(System.String)">
            <summary>
            Determines whether contains the specified field.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>true if contains an field with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.GetSecondaryFieldName">
            <summary>
            Return part of field name after "_", e.g. "Id" of "Member_Id".
            </summary>
            <returns>string.Empty if thre is no "_" in field name.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.GetValue``1(System.String)">
            <summary>
            Return the value of the specified field not defined in property.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="fieldName">Field name.</param>
            <returns>Value of field.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.GetValue(System.String)">
            <summary>
            Return the value of the specified field not defined in property.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Value of field.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.IsDBNull(System.String)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>true if the specified field is set to null; otherwise, false.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.SetPropertyChanged(System.String)">
            <summary>
            Set changed status of property.
            </summary>
            <param name="name">Property name.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBase.GetPrimaryFieldName">
            <summary>
            Return part of field name before "_", e.g. "Member" of "Member_Id".
            </summary>
            <returns>Field name itself if thre is no "_" in field name.</returns>
        </member>
        <member name="P:DbSharper2.Library.Data.ModelBase.ExtendedFields">
            <summary>
            Fields is not defined in properties.
            </summary>
        </member>
        <member name="T:DbSharper2.Library.Providers.CacheProvider">
            <summary>
            Abstract CacheProvider class.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Providers.CacheProvider.Get(System.String)">
            <summary>
            Retrieves the specified item from cache.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:DbSharper2.Library.Providers.CacheProvider.Insert(System.String,System.Object,System.Int32)">
            <summary>
            Inserts an item into cache with a cache key to reference its location.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="duration">The interval between the time the inserted object is last accessed and the time at which that object expires. By seconds.</param>
        </member>
        <member name="M:DbSharper2.Library.Providers.CacheProvider.Remove(System.String)">
            <summary>
            Removes the specified item from the application's cache.
            </summary>
            <param name="key">A System.String identifier for the cache item to remove.</param>
        </member>
        <member name="M:DbSharper2.Library.Providers.CacheProvider.RemoveBatch(System.String)">
            <summary>
            Removes a batch of items from the application's cache.
            </summary>
            <param name="tag">A System.String flag for the cache items to remove.</param>
        </member>
        <member name="T:DbSharper2.Library.Data.TransactionScopeConnections">
            <summary>
            This class manages the connections that will be used when transactions are active
            as a result of instantiating a <see cref="T:System.Transactions.TransactionScope"/>. When a transaction
            is active, all database access must be through this single connection unless you want
            to use a distributed transaction, which is an expensive operation.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.TransactionScopeConnections.GetConnection(DbSharper2.Library.Data.Database)">
            <summary>
            	Returns a connection for the current transaction. This will be an existing <see cref="T:System.Data.Common.DbConnection"/>
            	instance or a new one if there is a <see cref="T:System.Transactions.TransactionScope"/> active. Otherwise this method
            	returns null.
            </summary>
            <param name="db"></param>
            <returns>Either a <see cref="T:System.Data.Common.DbConnection"/> instance or null.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.TransactionScopeConnections.OnTransactionCompleted(System.Object,System.Transactions.TransactionEventArgs)">
            <summary>
            	This event handler is called whenever a transaction is about to be disposed, which allows
            	us to remove the transaction from our list and dispose the connection instance we created.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:DbSharper2.Library.Data.EnumHelper">
            <summary>
            A helper class to get additional information from an enum type.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.EnumHelper.GetDataSource(System.Type)">
            <summary>
            Convert an enum type to a data binding object.
            </summary>
            <param name="enumType">Type of enum.</param>
            <returns>Data binding object.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.EnumHelper.GetDescription(System.Type,System.String)">
            <summary>
            Get description attribute of relative enum type and member name.
            </summary>
            <param name="enumType">Enum type.</param>
            <param name="memberName">Enum member name.</param>
            <returns>Description of enum member.</returns>
        </member>
        <member name="T:DbSharper2.Library.Providers.InProcessCacheProvider">
            <summary>
            Cache provider using System.Web.HttpRuntime.Cache.
            </summary>
        </member>
        <member name="T:DbSharper2.Library.Data.IPagedResults`1">
            <summary>
            Implemented by types who has uniform paged results.
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Data.IPagedResults`1.Results">
            <summary>
            Result list.
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Data.IPagedResults`1.TotalCount">
            <summary>
            Total count of all objects.
            </summary>
        </member>
        <member name="T:DbSharper2.Library.Data.JsonBuilder">
            <summary>
            Build Json string.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.JsonBuilder.#ctor(System.Object)">
            <summary>
            JsonBuilder constructor.
            </summary>
            <param name="obj">Object to be converted</param>
        </member>
        <member name="M:DbSharper2.Library.Data.JsonBuilder.Append(System.String,System.Object)">
            <summary>
            Append property to the JSON object.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Property value</param>
        </member>
        <member name="M:DbSharper2.Library.Data.JsonBuilder.ToString">
            <summary>
            Get JSON format string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbSharper2.Library.Data.Database">
            <summary>
            Represents an abstract database that commands can be run against.
            </summary>
            <remarks>
            The <see cref="T:DbSharper2.Library.Data.Database"/> class leverages the provider factory model from ADO.NET. A database instance holds
            a reference to a concrete <see cref="T:System.Data.Common.DbProviderFactory"/> object to which it forwards the creation of ADO.NET objects.
            </remarks>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:DbSharper2.Library.Data.Database"/> class with a connection string and a <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
            <param name="dbProviderFactory">A <see cref="T:System.Data.Common.DbProviderFactory"/> object.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The commmand to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.AddOutParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a new Out <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the out parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object to the command.</para>
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object to the command.</para>
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.BuildParameterName(System.String)">
            <summary>
            Builds a value parameter name for the current database.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>A correctly formated parameter name.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.CreateConnection">
            <summary>
            <para>Creates a connection for this database.</para>
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.Common.DbConnection"/> for this database.</para>
            </returns>
            <seealso cref="T:System.Data.Common.DbConnection"/>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.ExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within the given <paramref name="transaction"/>, and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.ExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a transaction and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.GetParameterValue(System.Data.Common.DbCommand,System.String)">
            <summary>
            Gets a parameter value.
            </summary>
            <param name="command">The command that contains the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.GetSqlStringCommand(System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the SQL query.</para></returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.GetStoredProcCommand(System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.DoExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the query for <paramref name="command"/>.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> representing the query to execute.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.PrepareCommand(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            <para>Assigns a <paramref name="connection"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="connection">The connection to assign to the command.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.PrepareCommand(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Assigns a <paramref name="transaction"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="transaction">The transaction to assign to the command.</param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.ConfigureParameter(System.Data.Common.DbParameter,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Configures a given <see cref="T:System.Data.Common.DbParameter"/>.
            </summary>
            <param name="param">The <see cref="T:System.Data.Common.DbParameter"/> to configure.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>
            <returns>A newly created <see cref="T:System.Data.Common.DbParameter"/> fully initialized with given parameters.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.CreateParameter(System.String)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <returns><para>An unconfigured parameter.</para></returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.GetOpenConnection">
            <summary>
            	Get's a "wrapped" connection that will be not be disposed if a transaction is
            	active (created by creating a <see cref="T:System.Transactions.TransactionScope"/> instance). The
            	connection will be disposed when no transaction is active.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.GetOpenConnection(System.Boolean)">
            <summary>
            	Get's a "wrapped" connection that will be not be disposed if a transaction is
            	active (created by creating a <see cref="T:System.Transactions.TransactionScope"/> instance). The
            	connection can be disposed when no transaction is active.
            </summary>
            <param name="disposeInnerConnection">
            	Determines if the connection will be disposed when there isn't an active
            	transaction.
            </param>
            <returns>The wrapped connection.</returns>
        </member>
        <member name="P:DbSharper2.Library.Data.Database.ConnectionString">
            <summary>
            <para>Gets or sets the string used to open a database.</para>
            </summary>
            <value>
            <para>The string used to open a database.</para>
            </value>
            <seealso cref="P:System.Data.Common.DbConnection.ConnectionString"/>
        </member>
        <member name="T:DbSharper2.Library.Data.Database.ConnectionWrapper">
            <summary>
            	This is a helper class that is used to manage the lifetime of a connection for various
            	Execute methods. We needed this class to support implicit transactions created with
            	the <see cref="T:System.Transactions.TransactionScope"/> class. In this case, the various Execute methods
            	need to use a shared connection instead of a new connection for each request in order
            	to prevent a distributed transaction.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.ConnectionWrapper.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            	Create a new "lifetime" container for a <see cref="T:System.Data.Common.DbConnection"/> instance.
            </summary>
            <param name="connection">The connection</param>
            <param name="disposeConnection">
            	Whether or not to dispose of the connection when this class is disposed.
            </param>
        </member>
        <member name="M:DbSharper2.Library.Data.Database.ConnectionWrapper.Dispose">
            <summary>
            	Dispose the wrapped connection, if appropriate.
            </summary>
        </member>
        <member name="P:DbSharper2.Library.Data.Database.ConnectionWrapper.Connection">
            <summary>
            	Gets the actual connection.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBaseExtensions.JoinValues``1(System.Collections.Generic.List{``0},System.Func{``0,System.String})">
            <summary>
            Get series of property string value joinned by ",".
            </summary>
            <param name="list">Model list.</param>
            <param name="func">Function to get a property string value.</param>
            <returns>Series of property value string.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBaseExtensions.JoinValues``1(System.Collections.Generic.List{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Get series of property value joinned by ",".
            </summary>
            <param name="list">Model list.</param>
            <param name="func">Function to get a property string value.</param>
            <param name="separator">Separator.</param>
            <returns>Series of property value string.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBaseExtensions.JoinValues``1(System.Collections.Generic.List{``0},System.Func{``0,System.String},System.Func{``0,System.String})">
            <summary>
            Get series of property string value joinned by ",".
            </summary>
            <param name="list">Model list.</param>
            <param name="func1">Function to get the first property string value.</param>
            <param name="func2">Function to get the second property string value.</param>
            <returns>Series of property value string.</returns>
        </member>
        <member name="M:DbSharper2.Library.Data.ModelBaseExtensions.JoinValues``1(System.Collections.Generic.List{``0},System.Func{``0,System.String},System.Func{``0,System.String},System.String,System.String)">
            <summary>
            Get series of property value joinned by ",".
            </summary>
            <param name="list">Model list.</param>
            <param name="func1">Function to get the first property string value.</param>
            <param name="func2">Function to get the second property string value.</param>
            <param name="separator1">The first separator.</param>
            <param name="separator2">The second separator.</param>
            <returns>Series of property value string.</returns>
        </member>
        <member name="T:DbSharper2.Library.Caching.CachingService">
            <summary>
            Caching service.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.#ctor(System.String,System.String[])">
            <summary>
            Constructor, initialize a caching service object.
            </summary>
            <param name="key">Cache key.</param>
            <param name="parms">Parameters.</param>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.Get">
            <summary>
            Get value from cache.
            </summary>
            <returns>Cache value.</returns>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.Insert(System.Object)">
            <summary>
            Insert a value to cache.
            </summary>
            <param name="value">Cache value.</param>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.Insert(System.Object,System.Int32)">
            <summary>
            Insert a value to cache with duration.
            </summary>
            <param name="value">Cache value.</param>
            <param name="duration">Cache duration, by second.</param>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.Remove">
            <summary>
            Remove cache by key.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.RemoveBatch">
            <summary>
            Remove cache batch by key pattern.
            </summary>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.GetInternalKey(System.String,System.String[])">
            <summary>
            Build a internal key according to the key and parameters.
            </summary>
            <param name="key">Key of method.</param>
            <param name="parms">Method paramters</param>
            <returns>Internal key.</returns>
        </member>
        <member name="M:DbSharper2.Library.Caching.CachingService.LoadProviders">
            <summary>
            Load all cache providers.
            </summary>
        </member>
    </members>
</doc>
